name: "Module-CoreNetworking-Test"
run-name: Core Networking Test Deployment ${{ github.run_id }}
on:
  workflow_dispatch:
    inputs:
      location:
        description: "The location to deploy the test example to."
        required: true
        default: 'uksouth'
        type: choice
        options:
          - 'uksouth'
          - 'ukwest'
  pull_request:
    branches:
      - main
    
jobs:
  Validate:
    env:
      DeploymentFile: ${{ github.workspace }}/example/example.bicep
      DeploymentName: Module-CoreNetworking-${{ github.run_id }}
      ResourceGroupName: corenetwork-${{ github.run_id }}
      DeploymentLocation: ${{ github.event.inputs.location || 'uksouth' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
      - name: Install AzCLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Install Bicep
        run: | 
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep /usr/local/bin/bicep
          bicep --help
      - name: Authenticate
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          auth-type: SERVICE_PRINCIPAL
      - name: Lint
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az bicep lint --file $DeploymentFile 
      - name: Create Resource Group
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "Resource Group Name is $ResourceGroupName"
            if [[az group exists --name "$ResourceGroupName"]]; then
              echo "Resource Group $ResourceGroupName already exists, skipping creation."
            else
              az group create --name "$ResourceGroupName" --location ${{ env.DeploymentLocation }}
            fi
      - name: Validate
        uses: azure/cli@v2
        with: 
          azcliversion: latest
          inlineScript: |
            az stack group validate --name "$DeploymentName" \
              --resource-group "$ResourceGroupName" \
              --action-on-unmanage detachAll \
              --template-file $DeploymentFile \
              --deny-settings-mode None 
      - name: Plan
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az deployment group what-if --name "$DeploymentName" \
              --resource-group "$ResourceGroupName" \
              --template-file $DeploymentFile
      
  Deploy:
    uses: scankin/bicep-module-core-networking/.github/workflows/Deploy-Bicep.yml@feature/pipelines
    with:
      location: $DeploymentLocation
      deployment_file: $DeploymentFile
      resource_group_name: $ResourceGroupName
      deployment_name: $DeploymentName

  CleanUp:
    if: ${{ always() && contains(needs.*.result, 'failure')}}
    env:
      DeploymentFile: ${{ github.workspace }}/example/example.bicep
      ResourceGroupName: corenetwork-${{ github.run_id }}
      DeploymentLocation: ${{ github.event.inputs.location || 'uksouth' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install AzCLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      - name: Install Bicep
        run: | 
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          chmod +x ./bicep
          sudo mv ./bicep /usr/local/bin/bicep
          bicep --help
      - name: Authenticate
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
          auth-type: SERVICE_PRINCIPAL
      - name: Delete Resource Group
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            echo "Resource Group Name is $ResourceGroupName"
            if [[az group exists --name "$ResourceGroupName"]]; then
              echo "Removing Resource Group $ResourceGroupName"
              az group delete --name "$ResourceGroupName" --yes
            else
              echo "Resource Group $ResourceGroupName does not exist, skipping deletion."
            fi